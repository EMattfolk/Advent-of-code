from std use split, print, as_str, for_each, push, add, remove, as_char
use /st

A :: as_char("A")
Z :: as_char("Z")

solve :: fn input -> (str, str) do

    input :: input -> split()

    graph := {:}

    input -> for_each' fn line do
        edge :: split(st.string.gsub(line, "(%w+)-(%w+)", "%1 %2"))
        graph[edge[0]] = []
        graph[edge[1]] = []
    end

    input -> for_each' fn line do
        edge :: split(st.string.gsub(line, "(%w+)-(%w+)", "%1 %2"))
        if edge[1] != "start" do
            graph[edge[0]] -> push(edge[1])
        end
        if edge[0] != "start" do
            graph[edge[1]] -> push(edge[0])
        end
    end

    res1 := 0
    visited := {}

    dfs1 := fn node do end
    dfs1  = fn node do
        if node == "end" do
            res1 += 1
            ret
        end

        if node in visited do
            ret
        end

        if as_char(node) < A or Z < as_char(node) do
            visited -> add(node)
        end

        graph[node] -> for_each' fn neighbor do
            dfs1(neighbor)
        end

        visited -> remove(node)
    end

    dfs1("start")

    res2 := 0
    visited := {}

    dfs2 := fn node, twice do end
    dfs2  = fn node, twice do
        if node == "end" do
            res2 += 1
            ret
        end

        new_twice := twice
        if node in visited do
            if not twice do
                new_twice = true
            else do
                ret
            end
        end

        if as_char(node) < A or Z < as_char(node) do
            visited -> add(node)
        end

        graph[node] -> for_each' fn neighbor do
            dfs2(neighbor, new_twice)
        end

        if twice == new_twice do
            visited -> remove(node)
        end
    end

    dfs2("start", false)

    (as_str(res1), as_str(res2))
end
