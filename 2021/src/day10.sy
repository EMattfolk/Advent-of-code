from std use split, print, as_char, as_chars, for_each, map, len, pop, as_str, push
use /st

LP :: as_char("(")
RP :: as_char(")")
LB :: as_char("[")
RB :: as_char("]")
LC :: as_char("{")
RC :: as_char("}")
LT :: as_char("<")
RT :: as_char(">")

MATCHING :: {
    LP: RP,
    LB: RB,
    LC: RC,
    LT: RT,
}

SCORE :: {
    RP: 3,
    RB: 57,
    RC: 1197,
    RT: 25137,
}

COMPLETION_SCORE :: {
    RP: 1,
    RB: 2,
    RC: 3,
    RT: 4,
}

solve :: fn input -> (str, str) do
    input :: input -> split() -> map(as_chars)

    res1 := 0
    completion_scores := []
    input -> for_each' fn line do
        stack := [line[0]]
        i := 1
        loop i < len(line) do
            current :: line[i]
            if current == LP or current == LB or current == LC or current == LT do
                stack -> push' current
            else do
                top :: stack -> pop()
                opposite := MATCHING[top]
                if opposite != current do
                    res1 += SCORE[current]
                    ret
                end
            end
            i += 1
        end

        completion_score := 0
        i := len(stack) - 1
        loop i >= 0 do
            completion_score *= 5
            completion_score += COMPLETION_SCORE[MATCHING[stack[i]]]
            i -= 1
        end
        completion_scores -> push(completion_score)
    end

    st.sort(completion_scores)
    res2 :: completion_scores[(len(completion_scores) - 1) / 2]

    (as_str(res1), as_str(res2))
end
