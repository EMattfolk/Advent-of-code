from std use split, print, as_str, len, as_chars, as_char, map, add, push, for_each
use /st

hash :: as_char("#")

solve :: fn input -> (str, str) do
    input :: split(input) -> map(fn l -> map(as_chars(l), fn c -> c == hash end) end)
    enhancement :: input[0]

    image := {}
    image_list := []

    next_img :: fn negative do
        possible := []
        image_list -> for_each' fn point do
            ox := -1
            loop ox <= 1 do
                oy := -1
                loop oy <= 1 do
                    possible -> push((point[0] + ox, point[1] + oy))
                    oy += 1
                end
                ox += 1
            end
        end

        new_img := {}
        new_img_list := []
        possible -> for_each' fn point do
            index := 0
            oy := -1
            loop oy <= 1 do
                ox := -1
                loop ox <= 1 do
                    index *= 2
                    if (as_str((point[0] + ox, point[1] + oy)) in image) == negative do
                        index += 1
                    end
                    ox += 1
                end
                oy += 1
            end
            if enhancement[index] != negative do
                s := as_str(point)
                if not (s in new_img) do
                    new_img -> add(s)
                    new_img_list -> push(point)
                end
            end
        end

        image = new_img
        image_list = new_img_list
    end

    r := 1
    loop r < len(input) do
        c := 0
        loop c < len(input[r]) do
            if input[r][c] do
                loc := (c, r)
                image -> add(as_str(loc))
                image_list -> push(loc)
            end
            c += 1
        end
        r += 1
    end

    next_img(true)
    next_img(false)

    res1 := len(image)

    i := 1
    loop i < 25 do
        next_img(true)
        next_img(false)
        i += 1
    end

    res2 := len(image)
    (as_str(res1), as_str(res2))
end
