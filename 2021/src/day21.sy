from std use split, print, as_str, len, rem, push
use /st

solve :: fn input -> (str, str) do
    input :: input -> split()

    p1_orig := st.tonumber(input[4]) - 1
    p2_orig := st.tonumber(input[9]) - 1

    p1 := p1_orig
    p2 := p2_orig

    die := 0
    rolls := 0
    roll :: fn -> int do
        rolls += 1
        die = rem(die, 100) + 1
        die
    end

    res1 := 0
    score1 := 0
    score2 := 0
    loop do
        p1 = rem(p1 + roll() + roll() + roll(), 10)
        score1 += p1 + 1
        if score1 >= 1000 do
            res1 = rolls * score2
            break
        end
        p2 = rem(p2 + roll() + roll() + roll(), 10)
        score2 += p2 + 1
        if score2 >= 1000 do
            res1 = rolls * score1
            break
        end
    end

    score1 := 0
    score2 := 0

    // TODO: Do when better dicts are implemented
    states := { as_str((p1_orig, 0, p2_orig, 0)) }
    states_list := [[p1_orig, 0, p2_orig, 0, 1]]

    roll1 :: fn do
    end

    roll2 :: fn do
    end

    i := 0
    loop i < 7 do
        roll1()
        roll1()
        roll1()
        roll2()
        roll2()
        roll2()
        i += 1
    end

    res2 := score1
    (as_str(res1), as_str(res2))
end
