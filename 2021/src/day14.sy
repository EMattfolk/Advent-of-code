from std use split, print, as_str, as_chars, len, push, fold, for_each, add, min, max
use /st

solve :: fn input -> (str, str) do
    input :: split(input)


    possible := []
    possible_chars := []
    possible_chars_set := {}
    transform := {:}
    i := 1
    loop i < len(input) do
        chars := as_chars(input[i])
        a :: st.string.char(chars[0])
        b :: st.string.char(chars[1])
        c :: input[i+2]

        transform[a+b] = [a+c, c+b]
        if not a in possible_chars_set do
            possible_chars -> push(a)
            possible_chars_set -> add(a)
        end
        if not b in possible_chars_set do
            possible_chars -> push(b)
            possible_chars_set -> add(b)
        end
        if not c in possible_chars_set do
            possible_chars -> push(c)
            possible_chars_set -> add(c)
        end

        possible -> push(a+b)

        i += 3
    end

    template :: as_chars(input[0])
    polymers := possible -> fold' {:}, fn p, acc ->
        acc[p] = 0
        acc
    end

    i := 0
    loop i < len(template) - 1 do
        a :: st.string.char(template[i])
        b :: st.string.char(template[i+1])
        polymers[a + b] += 1
        i += 1
    end

    step :: fn do
        new_polymers := possible -> fold' {:}, fn p, acc ->
                            acc[p] = 0
                            acc
                        end
        possible -> for_each' fn p do
            transform[p] -> for_each' fn t do
                new_polymers[t] += polymers[p]
            end
        end
        polymers = new_polymers
    end

    calc_res :: fn -> int
        counts := possible_chars -> fold' {:}, fn p, acc ->
            acc[p] = 0
            acc
        end

        possible -> for_each' fn p do
            chars :: as_chars(p)
            a :: st.string.char(chars[0])
            b :: st.string.char(chars[1])
            counts[a] += polymers[p]
            counts[b] += polymers[p]
        end

        counts[st.string.char(template[0])] += 1
        counts[st.string.char(template[len(template) - 1])] += 1

        ma := possible_chars -> fold' 0, fn c, acc -> max(counts[c], acc) end
        mi := possible_chars -> fold' 100000000000000, fn c, acc -> min(counts[c], acc) end
        ret (ma - mi) / 2
    end

    i := 0
    loop i < 10 do
        step()
        i += 1
    end

    res1 := calc_res()

    loop i < 40 do
        step()
        i += 1
    end

    res2 := calc_res()
    (as_str(res1), as_str(res2))
end
