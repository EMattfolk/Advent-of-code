from std use split, print, map, as_chars, as_char, for_each, as_str, len, push, pop
use /st

ZERO :: as_char("0")

solve :: fn input -> (str, str) do
    visited := []
    grid :: split(input) -> map' fn line ->
        line :: as_chars(line)
        visited -> push' line -> map' fn _ -> false end
        line -> map' fn c -> c - ZERO end
    end

    height :: len(grid)
    width :: len(grid[0])

    in_bounds :: fn r, c -> 0 <= r and r < height and 0 <= c and c < width end

    low_points := []

    res1 := 0
    r := 0
    loop r < height do
        c := 0
        loop c < width do

            current :: grid[r][c]
            is_low := true
            [(0, 1), (0, -1), (1, 0), (-1, 0)] -> for_each' fn offset do
                nr := r + offset[0]
                nc := c + offset[1]

                if in_bounds(nr, nc) and grid[nr][nc] <= current do
                    is_low = false
                end
            end

            if is_low do
                low_points -> push' (r, c)
                res1 += current + 1
            end

            c += 1
        end
        r += 1
    end

    basins := []

    low_points -> for_each' fn point do
        basin := 0
        to_visit := [point]
        visited[point[0]][point[1]] = true
        loop len(to_visit) > 0 do
            p :: to_visit -> pop'
            r :: p[0]
            c :: p[1]
            depth :: grid[r][c]

            basin += 1

            [(0, 1), (0, -1), (1, 0), (-1, 0)] -> for_each' fn offset do
                nr := r + offset[0]
                nc := c + offset[1]

                if (in_bounds(nr, nc)
                    and not visited[nr][nc]
                    and grid[nr][nc] > depth
                    and grid[nr][nc] != 9)
                do
                    to_visit -> push' (nr, nc)
                    visited[nr][nc] = true
                end
            end
        end

        basins -> push' basin
    end

    st.sort(basins)
    res2 :: ( basins[len(basins) - 1]
            * basins[len(basins) - 2]
            * basins[len(basins) - 3]
            )

    (as_str(res1), as_str(res2))
end
