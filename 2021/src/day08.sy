from std use split, print, as_chars, as_str, for_each, len, map, fold
use /st

overlap :: fn a, b ->
    a -> fold' 0, fn d, acc ->
         acc + (1 if d in b else 0)
    end
end

solve :: fn input -> (str, str) do
    input :: split(input) -> map' as_chars
    input -> for_each' fn d do st.sort(d) end

    res1 := 0
    i := 11
    loop i < len(input) do
        [input[i], input[i+1], input[i+2], input[i+3]] -> for_each' fn value do
            if len(value) == 2 or len(value) == 3 or len(value) == 4 or len(value) == 7 do
                res1 += 1
            end
        end
        i += 15
    end

    res2 := 0
    i := 0
    loop i < len(input) do
        digits := [[], [], [], [], [], [], [], [], [], []]

        // 1, 4, 7, 8
        j := 0
        loop j < 10 do
            if len(input[i + j]) == 2 do
                digits[1] = input[i + j]
            else if len(input[i + j]) == 3 do
                digits[7] = input[i + j]
            else if len(input[i + j]) == 4 do
                digits[4] = input[i + j]
            else if len(input[i + j]) == 7 do
                digits[8] = input[i + j]
            end
            j += 1
        end

        // 6
        j := 0
        loop j < 10 do
            if len(input[i + j]) == 6 do
                if overlap(input[i + j], digits[1]) == 1 do
                    digits[6] = input[i + j]
                end
            end

            j += 1
        end

        // 0, 9
        j := 0
        loop j < 10 do
            if len(input[i + j]) == 6 and input[i + j] != digits[6] do
                if overlap(input[i + j], digits[4]) == 3 do
                    digits[0] = input[i + j]
                else do
                    digits[9] = input[i + j]
                end
            end

            j += 1
        end

        // 2
        j := 0
        loop j < 10 do
            if len(input[i + j]) == 5 do
                if overlap(input[i + j], digits[4]) == 2 do
                    digits[2] = input[i + j]
                end
            end

            j += 1
        end

        // 3, 5
        j := 0
        loop j < 10 do
            if len(input[i + j]) == 5 and input[i + j] != digits[2] do
                if overlap(input[i + j], digits[7]) == 3 do
                    digits[3] = input[i + j]
                else do
                    digits[5] = input[i + j]
                end
            end

            j += 1
        end

        i += 11

        // sum it up
        j := 0
        loop j < 10 do
            if input[i + 0] == digits[j] do
                res2 += j * 1000
            end
            if input[i + 1] == digits[j] do
                res2 += j * 100
            end
            if input[i + 2] == digits[j] do
                res2 += j * 10
            end
            if input[i + 3] == digits[j] do
                res2 += j * 1
            end
            j += 1
        end

        i += 4
    end

    (as_str(res1), as_str(res2))
end
