from std use split, print, as_str, len, push, pop, add, for_each
use /st

permutations :: [
    (0, 1, 2),
    (0, 2, 1),
    (1, 0, 2),
    (1, 2, 0),
    (2, 0, 1),
    (2, 1, 0),
]

modifiers :: [
    ( 1,  1,  1),
    ( 1,  1, -1),
    ( 1, -1,  1),
    ( 1, -1, -1),
    (-1,  1,  1),
    (-1,  1, -1),
    (-1, -1,  1),
    (-1, -1, -1),
]

solve :: fn input -> (str, str) do
    input :: split(input)

    scanners := []
    current := []
    i := 0
    loop i < len(input) do
        if input[i] == "---" do
            i += 4
            if len(current) > 0 do
                scanners -> push(current)
                current = []
            end
        end
        current -> push(st.comma_separated(input[i]))
        i += 1
    end

    scanners -> push(current)

    cloud := {}
    cloud_list := []

    points := scanners -> pop()
    points -> for_each' fn point do
        cloud -> add(as_str(point))
        cloud_list -> push(point)
    end

    try_inserting :: fn points -> bool do
        done := false
        cloud_list -> for_each' fn zero do
            if done do
                ret
            end
            permutations -> for_each' fn p do
                if done do
                    ret
                end
                modifiers -> for_each' fn m do
                    if done do
                        ret
                    end
                    matches := 0

                    points -> for_each' fn point do
                        permuted :: [point[p[0]] * m[0] + zero[0], point[p[1]] * m[1] + zero[1], point[p[2]] * m[2] + zero[2]]
                        if as_str(permuted) in cloud do
                            matches += 1
                        end
                    end

                    if matches < 12 do
                        ret
                    end

                    points -> for_each' fn point do
                        permuted :: [point[p[0]] * m[0], point[p[1]] * m[1], point[p[2]] * m[2]]
                        cloud -> add(as_str(permuted))
                        cloud_list -> push(permuted)
                    end

                    done = true
                end
            end
        end
        done
    end

    aux := []
    loop len(scanners) > 0 do
        aux = []
        //scanners -> for_each' fn points do
        //    if not try_inserting(points) do
        //        aux -> push(points)
        //    end
        //end
        //print(len(aux))
        scanners = aux
    end

    res1 := len(cloud)
    res2 := 0
    (as_str(res1), as_str(res2))
end
