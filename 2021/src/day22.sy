from std use split, print, as_str, len, map, min, max, add, remove, for_each, push
use /st

solve :: fn input -> (str, str) do
    input :: input -> split()

    overlap :: fn a, b -> (int, int, int, int, int, int) do
        xstart :: max(a[0], b[0])
        xend :: min(a[1], b[1])
        if xstart > xend do
            ret (0, -1, 0, -1, 0, -1)
        end
        ystart :: max(a[2], b[2])
        yend :: min(a[3], b[3])
        if ystart > yend do
            ret (0, -1, 0, -1, 0, -1)
        end
        zstart :: max(a[4], b[4])
        zend :: min(a[5], b[5])
        if zstart > zend do
            ret (0, -1, 0, -1, 0, -1)
        end
        ret (xstart, xend, ystart, yend, zstart, zend)
    end

    cube_size :: fn cube -> int do
        ret (cube[1] + 1 - cube[0]) * (cube[3] + 1 - cube[2]) * (cube[5] + 1 - cube[4])
    end

    res1 := 0
    regions := []
    i := len(input) - 2
    loop i >= 0 do
        on :: input[i] == "on"
        limits :: st.string.gsub(input[i+1], "[^-0-9]+", " ") -> split() -> map(st.tonumber)
        xmin :: max(limits[0], -50)
        xmax :: min(limits[1],  50)
        if xmin > xmax do
            i -= 2
            continue
        end
        ymin :: max(limits[2], -50)
        ymax :: min(limits[3],  50)
        if ymin > ymax do
            i -= 2
            continue
        end
        zmin :: max(limits[4], -50)
        zmax :: min(limits[5],  50)
        if zmin > zmax do
            i -= 2
            continue
        end

        overlaps := [[(xmin, xmax, ymin, ymax, zmin, zmax)]]

        if on do
            regions -> for_each' fn region do
                level := len(overlaps) - 1
                loop level >= 0 do
                    overlaps[level] -> for_each' fn r do
                        o :: overlap(r, region)
                        if cube_size(o) > 0 do
                            if level == len(overlaps) - 1 do
                                overlaps -> push([o])
                            else do
                                overlaps[level + 1] -> push(o)
                            end
                        end
                    end
                    level -= 1
                end
            end

            modifier := -1
            overlaps -> for_each' fn level do
                modifier *= -1
                level -> for_each' fn cube do
                    res1 += modifier * cube_size(cube)
                end
            end
        end

        regions -> push((xmin, xmax, ymin, ymax, zmin, zmax))
        i -= 2
    end

    res2 := 0
    regions := []
    i := len(input) - 2
    loop i >= 0 do
        on :: input[i] == "on"
        limits :: st.string.gsub(input[i+1], "[^-0-9]+", " ") -> split() -> map(st.tonumber)
        xmin :: limits[0]
        xmax :: limits[1]
        ymin :: limits[2]
        ymax :: limits[3]
        zmin :: limits[4]
        zmax :: limits[5]

        overlaps := [[(xmin, xmax, ymin, ymax, zmin, zmax)]]

        if on do
            regions -> for_each' fn region do
                level := len(overlaps) - 1
                loop level >= 0 do
                    overlaps[level] -> for_each' fn r do
                        o :: overlap(r, region)
                        if cube_size(o) > 0 do
                            if level == len(overlaps) - 1 do
                                overlaps -> push([o])
                            else do
                                overlaps[level + 1] -> push(o)
                            end
                        end
                    end
                    level -= 1
                end
            end

            modifier := -1
            overlaps -> for_each' fn level do
                modifier *= -1
                level -> for_each' fn cube do
                    res2 += modifier * cube_size(cube)
                end
            end
        end

        regions -> push((xmin, xmax, ymin, ymax, zmin, zmax))
        i -= 2
    end

    (as_str(res1), st.format("%.f", res2))
end
